name: Apply Changes on Bluebricks

on:
  pull_request:
    types:
      - closed

jobs:
  apply-changes-to-environments:
    runs-on: ubuntu-latest
    environment: "Yalovich"
    env: 
      JWT: ${{ secrets.JWT }}
    strategy:
        fail-fast: true
    if: github.event.pull_request.merged == true
    steps:
    - name: Set up GitHub CLI
      run: |
          sudo apt-get install -y gh
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Get Changed Files
      id: changed-files
      run: |
        gh api \
        repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files \
        --jq '.[].filename' > diff.txt

    - name: Read diff.txt and Validate JSON
      run: |
        mkdir -p valid_json_files

        # Check if diff.txt exists
        if [[ ! -f diff.txt ]]; then
          echo "diff.txt not found. Exiting."
          exit 1
        fi

        # Loop through files listed in diff.txt
        while IFS= read -r file; do
          # echo "Processing file: $file"
          
          # Check if file exists
          if [[ ! -f "$file" ]]; then
            echo "File $file listed in diff.txt does not exist. Skipping."
            continue
          fi

          # Validate if the file is a JSON file
          if jq empty "$file" >/dev/null 2>&1; then
            echo "File $file is valid JSON. Copying to valid_json_files."
            cp "$file" valid_json_files/
          else
            echo "File $file is not a valid JSON file. Skipping."
          fi

        done < diff.txt
      shell: bash

    - name: Fetch environments
      run: |
        curl -s -f -o response.json --location 'https://api.bluebricks.co/api/v1/environments?all=true&expand=false&limit=100&offset=0' --header 'Authorization: Bearer ${{ secrets.JWT }}'

    - name: Read Changed Files
      id: read-changed-files
      run: |
          for file in valid_json_files/*.json; do
            # Check if there are any JSON files
            if [[ ! -f "$file" ]]; then
              echo "No JSON files found in valid_json_files. Skipping."
              break
            fi

            echo "Checking file: $file"

            # Use jq to check for the "id" property
            if jq -e 'has("id")' "$file" >/dev/null 2>&1; then
              echo "File $file contains the 'id' property."
            else
              echo "File $file does not contain the 'id' property."
              modified_json=$(jq 'del(.type)' "$file")
               # Send the POST request
              curl -X POST "https://api.bluebricks.co/api/v1/environment" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer ${{ secrets.JWT }}" \
                -d "$modified_json"
              # curl -X PUT -H "Content-Type: application/json" -d "$modified_json" "https://example.com/endpoint"
            fi
          done

    # - name: Run JSON update script
    #   run: |
    #     # Define the path to the large JSON file
    #     RESPONSE_JSON="response.json"

    #     # Loop through each small JSON file in the current directory
    #     for ENVS_JSON in valid_json_files/*.json; do
    #       # Skip the large JSON file
    #       if [[ "$ENVS_JSON" == "$RESPONSE_JSON" ]]; then
    #         continue
    #       fi

    #       # Extract the ID from the current small JSON file
    #       ID=$(jq -r '.id' "$ENVS_JSON")

    #     done
    #       # Extract the ID from the current small JSON file
    #       ID=$(jq -r '.id' "$ENVS_JSON")

    #       # Extract the corresponding item from the large JSON file using the ID
    #       LARGE_COLOR=$(jq -r --arg ID "$ID" '.list[] | select(.id == $ID) | .color' "$RESPONSE_JSON")
    #       SMALL_COLOR=$(jq -r '.color' "$ENVS_JSON")
          
    #       LARGE_NAME=$(jq -r --arg ID "$ID" '.list[] | select(.id == $ID) | .name' "$RESPONSE_JSON")
    #       SMALL_NAME=$(jq -r '.name' "$ENVS_JSON")

    #       # Initialize an empty JSON object for changes
    #       CHANGES="{}"

    #       # Compare the color field
    #       if [[ "$LARGE_COLOR" != "$SMALL_COLOR" ]]; then
    #         CHANGES=$(jq -n --arg color "$SMALL_COLOR" '{color: $color}')
    #       fi

    #       # Compare the name field
    #       if [[ "$LARGE_NAME" != "$SMALL_NAME" ]]; then
    #         # If color changes already exist, add the name change to the existing object
    #         if [ "$CHANGES" != "{}" ]; then
    #           CHANGES=$(echo "$CHANGES" | jq --arg name "$SMALL_NAME" '. + {name: $name}')
    #         else
    #           CHANGES=$(jq -n --arg name "$SMALL_NAME" '{name: $name}')
    #         fi
    #       fi

    #       # If there are any changes, send the PUT request
    #       if [ "$CHANGES" != "{}" ]; then
    #         # Send the PUT request
    #         # curl -X PUT "https://api.bricks-dev.com/api/v1/environment/$ID/edit" \
    #         #   -H "Content-Type: application/json" \
    #         #   -H "Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Im1VUEt1SkE1NlljR3V4RE5rQnJUdCJ9.eyJlbWFpbCI6ImlkYW5AYmx1ZWJyaWNrcy5jbyIsIm9yZ2FuaXphdGlvbiI6ImJsdWVicmlja3MiLCJpc3MiOiJodHRwczovL2F1dGguYnJpY2tzLWRldi5jb20vIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMTAyNzA3NzExNTE0NjQxNzM1MjQiLCJhdWQiOlsiaHR0cHM6Ly9ibHVlYnJpY2tzLWFwaS1kZXYiLCJodHRwczovL2JsdWVicmlja3MtZGV2ZWxvcC5ldS5hdXRoMC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNzMxMjUxNzc5LCJleHAiOjE3MzEzMzgxNzksInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJvcmdfaWQiOiJvcmdfZTVPaDFhZXh3NE9VRFptZCIsImF6cCI6ImxFeERXQ045WWZ1cG5MV29aTzBFQWNkODhoMUNrQmpVIiwicGVybWlzc2lvbnMiOlsiY3JlYXRlOmNsb3VkIiwiY3JlYXRlOmRlcGxveW1lbnQiLCJjcmVhdGU6ZW52aXJvbm1lbnQiLCJjcmVhdGU6cGFja2FnZSIsImNyZWF0ZTp1c2VycyIsImRlbGV0ZTpjbG91ZCIsImRlbGV0ZTplbnZpcm9ubWVudCIsImRlbGV0ZTpwYWNrYWdlIiwiZGVsZXRlOnVzZXJzIiwicmVhZDpjbG91ZCIsInJlYWQ6ZGVwbG95bWVudCIsInJlYWQ6ZGVwbG95bWVudC1wbGFuIiwicmVhZDplbnZpcm9ubWVudCIsInJlYWQ6b3JnYW5pemF0aW9uIiwicmVhZDpwYWNrYWdlIiwicmVhZDpyZXNjdWUiLCJyZWFkOnRhc2siLCJyZWFkOnVzZXJzIiwicmVhZDp2ZW5kb3IiLCJ1cGRhdGU6ZGVwbG95bWVudCIsInVwZGF0ZTplbnZpcm9ubWVudCIsInVwZGF0ZTpvcmdhbml6YXRpb24iLCJ1cGRhdGU6cGFja2FnZSIsInVwZGF0ZTp1c2VycyJdfQ.g2FCgP7-b9KbXAhX1Uw2wlLp-qmizUAemeM8_4bS0kWZXkki1bEwj7w03Dkvr2a97c4YLMLiYOxqvj8VQJ7g7hb8khwoWySTAGEKjMYLZu8M7JpmMjee_ec3iz_vzp7KsZ6Gita1X8MOxp_xBR58wozbFZ52_dQXcqnFSW7yWsPhOBuhlhx5pKe34CDswm4Bha9oq9bRY_qi1Na26yIT1ld-S_HKq6paENS_zngr_xGOh46oTjYEzrJHvVJoQTv4SbPVzyLK7OFDFVrYGM5gbFiKauSBZZ6dl97nGWuEuiNxSoS-KL0wJ0qBFRKYmFfBn4aZDxgP0XgkUXsrrXkS2A" \
    #         #   -d "$CHANGES"
    #         echo "$CHANGES"
    #         ::debug::$CHANGES

    #         echo "Updated fields for ID: $ID from file $ENVS_JSON"
    #       else
    #         echo "No changes detected for ID: $ID from file $ENVS_JSON"
    #       fi
        # done

    #     # remove temp files
    #     rm response.json
